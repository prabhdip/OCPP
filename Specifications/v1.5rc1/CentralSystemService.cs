//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 


/// <remarks/>
// CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="CentralSystemServiceSoap", Namespace="urn://Ocpp/Cs/2012/02/")]
public partial class CentralSystemService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private @string chargeBoxIdentityField;
    
    private System.Threading.SendOrPostCallback AuthorizeOperationCompleted;
    
    private System.Threading.SendOrPostCallback StartTransactionOperationCompleted;
    
    private System.Threading.SendOrPostCallback StopTransactionOperationCompleted;
    
    private System.Threading.SendOrPostCallback HeartbeatOperationCompleted;
    
    private System.Threading.SendOrPostCallback MeterValuesOperationCompleted;
    
    private System.Threading.SendOrPostCallback BootNotificationOperationCompleted;
    
    private System.Threading.SendOrPostCallback StatusNotificationOperationCompleted;
    
    private System.Threading.SendOrPostCallback FirmwareStatusNotificationOperationCompleted;
    
    private System.Threading.SendOrPostCallback DiagnosticsStatusNotificationOperationCompleted;
    
    private System.Threading.SendOrPostCallback DataTransferOperationCompleted;
    
    /// <remarks/>
    public CentralSystemService() {
        this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
        this.Url = "http://localhost/Ocpp/CentralSystemService/";
    }
    
    public @string chargeBoxIdentity {
        get {
            return this.chargeBoxIdentityField;
        }
        set {
            this.chargeBoxIdentityField = value;
        }
    }
    
    /// <remarks/>
    public event AuthorizeCompletedEventHandler AuthorizeCompleted;
    
    /// <remarks/>
    public event StartTransactionCompletedEventHandler StartTransactionCompleted;
    
    /// <remarks/>
    public event StopTransactionCompletedEventHandler StopTransactionCompleted;
    
    /// <remarks/>
    public event HeartbeatCompletedEventHandler HeartbeatCompleted;
    
    /// <remarks/>
    public event MeterValuesCompletedEventHandler MeterValuesCompleted;
    
    /// <remarks/>
    public event BootNotificationCompletedEventHandler BootNotificationCompleted;
    
    /// <remarks/>
    public event StatusNotificationCompletedEventHandler StatusNotificationCompleted;
    
    /// <remarks/>
    public event FirmwareStatusNotificationCompletedEventHandler FirmwareStatusNotificationCompleted;
    
    /// <remarks/>
    public event DiagnosticsStatusNotificationCompletedEventHandler DiagnosticsStatusNotificationCompleted;
    
    /// <remarks/>
    public event DataTransferCompletedEventHandler DataTransferCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/Authorize", RequestElementName="authorizeRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="authorizeResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("idTagInfo")]
    public IdTagInfo Authorize(string idTag) {
        object[] results = this.Invoke("Authorize", new object[] {
                    idTag});
        return ((IdTagInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAuthorize(string idTag, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Authorize", new object[] {
                    idTag}, callback, asyncState);
    }
    
    /// <remarks/>
    public IdTagInfo EndAuthorize(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((IdTagInfo)(results[0]));
    }
    
    /// <remarks/>
    public void AuthorizeAsync(string idTag) {
        this.AuthorizeAsync(idTag, null);
    }
    
    /// <remarks/>
    public void AuthorizeAsync(string idTag, object userState) {
        if ((this.AuthorizeOperationCompleted == null)) {
            this.AuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeOperationCompleted);
        }
        this.InvokeAsync("Authorize", new object[] {
                    idTag}, this.AuthorizeOperationCompleted, userState);
    }
    
    private void OnAuthorizeOperationCompleted(object arg) {
        if ((this.AuthorizeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AuthorizeCompleted(this, new AuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/StartTransaction", RequestElementName="startTransactionRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="startTransactionResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("transactionId")]
    public int StartTransaction(int connectorId, string idTag, System.DateTime timestamp, int meterStart, int reservationId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool reservationIdSpecified, out IdTagInfo idTagInfo) {
        object[] results = this.Invoke("StartTransaction", new object[] {
                    connectorId,
                    idTag,
                    timestamp,
                    meterStart,
                    reservationId,
                    reservationIdSpecified});
        idTagInfo = ((IdTagInfo)(results[1]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginStartTransaction(int connectorId, string idTag, System.DateTime timestamp, int meterStart, int reservationId, bool reservationIdSpecified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StartTransaction", new object[] {
                    connectorId,
                    idTag,
                    timestamp,
                    meterStart,
                    reservationId,
                    reservationIdSpecified}, callback, asyncState);
    }
    
    /// <remarks/>
    public int EndStartTransaction(System.IAsyncResult asyncResult, out IdTagInfo idTagInfo) {
        object[] results = this.EndInvoke(asyncResult);
        idTagInfo = ((IdTagInfo)(results[1]));
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void StartTransactionAsync(int connectorId, string idTag, System.DateTime timestamp, int meterStart, int reservationId, bool reservationIdSpecified) {
        this.StartTransactionAsync(connectorId, idTag, timestamp, meterStart, reservationId, reservationIdSpecified, null);
    }
    
    /// <remarks/>
    public void StartTransactionAsync(int connectorId, string idTag, System.DateTime timestamp, int meterStart, int reservationId, bool reservationIdSpecified, object userState) {
        if ((this.StartTransactionOperationCompleted == null)) {
            this.StartTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartTransactionOperationCompleted);
        }
        this.InvokeAsync("StartTransaction", new object[] {
                    connectorId,
                    idTag,
                    timestamp,
                    meterStart,
                    reservationId,
                    reservationIdSpecified}, this.StartTransactionOperationCompleted, userState);
    }
    
    private void OnStartTransactionOperationCompleted(object arg) {
        if ((this.StartTransactionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StartTransactionCompleted(this, new StartTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/StopTransaction", RequestElementName="stopTransactionRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="stopTransactionResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("idTagInfo")]
    public IdTagInfo StopTransaction(int transactionId, string idTag, System.DateTime timestamp, int meterStop, [System.Xml.Serialization.XmlElementAttribute("transactionData")] TransactionData[] transactionData) {
        object[] results = this.Invoke("StopTransaction", new object[] {
                    transactionId,
                    idTag,
                    timestamp,
                    meterStop,
                    transactionData});
        return ((IdTagInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginStopTransaction(int transactionId, string idTag, System.DateTime timestamp, int meterStop, TransactionData[] transactionData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StopTransaction", new object[] {
                    transactionId,
                    idTag,
                    timestamp,
                    meterStop,
                    transactionData}, callback, asyncState);
    }
    
    /// <remarks/>
    public IdTagInfo EndStopTransaction(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((IdTagInfo)(results[0]));
    }
    
    /// <remarks/>
    public void StopTransactionAsync(int transactionId, string idTag, System.DateTime timestamp, int meterStop, TransactionData[] transactionData) {
        this.StopTransactionAsync(transactionId, idTag, timestamp, meterStop, transactionData, null);
    }
    
    /// <remarks/>
    public void StopTransactionAsync(int transactionId, string idTag, System.DateTime timestamp, int meterStop, TransactionData[] transactionData, object userState) {
        if ((this.StopTransactionOperationCompleted == null)) {
            this.StopTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopTransactionOperationCompleted);
        }
        this.InvokeAsync("StopTransaction", new object[] {
                    transactionId,
                    idTag,
                    timestamp,
                    meterStop,
                    transactionData}, this.StopTransactionOperationCompleted, userState);
    }
    
    private void OnStopTransactionOperationCompleted(object arg) {
        if ((this.StopTransactionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StopTransactionCompleted(this, new StopTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/Heartbeat", RequestElementName="heartbeatRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="heartbeatResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("currentTime")]
    public System.DateTime Heartbeat() {
        object[] results = this.Invoke("Heartbeat", new object[0]);
        return ((System.DateTime)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginHeartbeat(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Heartbeat", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public System.DateTime EndHeartbeat(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.DateTime)(results[0]));
    }
    
    /// <remarks/>
    public void HeartbeatAsync() {
        this.HeartbeatAsync(null);
    }
    
    /// <remarks/>
    public void HeartbeatAsync(object userState) {
        if ((this.HeartbeatOperationCompleted == null)) {
            this.HeartbeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHeartbeatOperationCompleted);
        }
        this.InvokeAsync("Heartbeat", new object[0], this.HeartbeatOperationCompleted, userState);
    }
    
    private void OnHeartbeatOperationCompleted(object arg) {
        if ((this.HeartbeatCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.HeartbeatCompleted(this, new HeartbeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/MeterValues", RequestElementName="meterValuesRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="meterValuesResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void MeterValues(int connectorId, int transactionId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool transactionIdSpecified, [System.Xml.Serialization.XmlElementAttribute("values")] MeterValue[] values) {
        this.Invoke("MeterValues", new object[] {
                    connectorId,
                    transactionId,
                    transactionIdSpecified,
                    values});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginMeterValues(int connectorId, int transactionId, bool transactionIdSpecified, MeterValue[] values, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("MeterValues", new object[] {
                    connectorId,
                    transactionId,
                    transactionIdSpecified,
                    values}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndMeterValues(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void MeterValuesAsync(int connectorId, int transactionId, bool transactionIdSpecified, MeterValue[] values) {
        this.MeterValuesAsync(connectorId, transactionId, transactionIdSpecified, values, null);
    }
    
    /// <remarks/>
    public void MeterValuesAsync(int connectorId, int transactionId, bool transactionIdSpecified, MeterValue[] values, object userState) {
        if ((this.MeterValuesOperationCompleted == null)) {
            this.MeterValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMeterValuesOperationCompleted);
        }
        this.InvokeAsync("MeterValues", new object[] {
                    connectorId,
                    transactionId,
                    transactionIdSpecified,
                    values}, this.MeterValuesOperationCompleted, userState);
    }
    
    private void OnMeterValuesOperationCompleted(object arg) {
        if ((this.MeterValuesCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.MeterValuesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/BootNotification", RequestElementName="bootNotificationRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="bootNotificationResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public RegistrationStatus BootNotification(string chargePointVendor, string chargePointModel, string chargePointSerialNumber, string chargeBoxSerialNumber, string firmwareVersion, string iccid, string imsi, string meterType, string meterSerialNumber, out System.DateTime currentTime, out int heartbeatInterval) {
        object[] results = this.Invoke("BootNotification", new object[] {
                    chargePointVendor,
                    chargePointModel,
                    chargePointSerialNumber,
                    chargeBoxSerialNumber,
                    firmwareVersion,
                    iccid,
                    imsi,
                    meterType,
                    meterSerialNumber});
        currentTime = ((System.DateTime)(results[1]));
        heartbeatInterval = ((int)(results[2]));
        return ((RegistrationStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBootNotification(string chargePointVendor, string chargePointModel, string chargePointSerialNumber, string chargeBoxSerialNumber, string firmwareVersion, string iccid, string imsi, string meterType, string meterSerialNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BootNotification", new object[] {
                    chargePointVendor,
                    chargePointModel,
                    chargePointSerialNumber,
                    chargeBoxSerialNumber,
                    firmwareVersion,
                    iccid,
                    imsi,
                    meterType,
                    meterSerialNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public RegistrationStatus EndBootNotification(System.IAsyncResult asyncResult, out System.DateTime currentTime, out int heartbeatInterval) {
        object[] results = this.EndInvoke(asyncResult);
        currentTime = ((System.DateTime)(results[1]));
        heartbeatInterval = ((int)(results[2]));
        return ((RegistrationStatus)(results[0]));
    }
    
    /// <remarks/>
    public void BootNotificationAsync(string chargePointVendor, string chargePointModel, string chargePointSerialNumber, string chargeBoxSerialNumber, string firmwareVersion, string iccid, string imsi, string meterType, string meterSerialNumber) {
        this.BootNotificationAsync(chargePointVendor, chargePointModel, chargePointSerialNumber, chargeBoxSerialNumber, firmwareVersion, iccid, imsi, meterType, meterSerialNumber, null);
    }
    
    /// <remarks/>
    public void BootNotificationAsync(string chargePointVendor, string chargePointModel, string chargePointSerialNumber, string chargeBoxSerialNumber, string firmwareVersion, string iccid, string imsi, string meterType, string meterSerialNumber, object userState) {
        if ((this.BootNotificationOperationCompleted == null)) {
            this.BootNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBootNotificationOperationCompleted);
        }
        this.InvokeAsync("BootNotification", new object[] {
                    chargePointVendor,
                    chargePointModel,
                    chargePointSerialNumber,
                    chargeBoxSerialNumber,
                    firmwareVersion,
                    iccid,
                    imsi,
                    meterType,
                    meterSerialNumber}, this.BootNotificationOperationCompleted, userState);
    }
    
    private void OnBootNotificationOperationCompleted(object arg) {
        if ((this.BootNotificationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BootNotificationCompleted(this, new BootNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/StatusNotification", RequestElementName="statusNotificationRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="statusNotificationResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void StatusNotification(int connectorId, ChargePointStatus status, ChargePointErrorCode errorCode, string info, System.DateTime timestamp, [System.Xml.Serialization.XmlIgnoreAttribute()] bool timestampSpecified, string vendorId, string vendorErrorCode) {
        this.Invoke("StatusNotification", new object[] {
                    connectorId,
                    status,
                    errorCode,
                    info,
                    timestamp,
                    timestampSpecified,
                    vendorId,
                    vendorErrorCode});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginStatusNotification(int connectorId, ChargePointStatus status, ChargePointErrorCode errorCode, string info, System.DateTime timestamp, bool timestampSpecified, string vendorId, string vendorErrorCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StatusNotification", new object[] {
                    connectorId,
                    status,
                    errorCode,
                    info,
                    timestamp,
                    timestampSpecified,
                    vendorId,
                    vendorErrorCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndStatusNotification(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void StatusNotificationAsync(int connectorId, ChargePointStatus status, ChargePointErrorCode errorCode, string info, System.DateTime timestamp, bool timestampSpecified, string vendorId, string vendorErrorCode) {
        this.StatusNotificationAsync(connectorId, status, errorCode, info, timestamp, timestampSpecified, vendorId, vendorErrorCode, null);
    }
    
    /// <remarks/>
    public void StatusNotificationAsync(int connectorId, ChargePointStatus status, ChargePointErrorCode errorCode, string info, System.DateTime timestamp, bool timestampSpecified, string vendorId, string vendorErrorCode, object userState) {
        if ((this.StatusNotificationOperationCompleted == null)) {
            this.StatusNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStatusNotificationOperationCompleted);
        }
        this.InvokeAsync("StatusNotification", new object[] {
                    connectorId,
                    status,
                    errorCode,
                    info,
                    timestamp,
                    timestampSpecified,
                    vendorId,
                    vendorErrorCode}, this.StatusNotificationOperationCompleted, userState);
    }
    
    private void OnStatusNotificationOperationCompleted(object arg) {
        if ((this.StatusNotificationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StatusNotificationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/FirmwareStatusNotification", RequestElementName="firmwareStatusNotificationRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="firmwareStatusNotificationResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void FirmwareStatusNotification(FirmwareStatus status) {
        this.Invoke("FirmwareStatusNotification", new object[] {
                    status});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginFirmwareStatusNotification(FirmwareStatus status, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("FirmwareStatusNotification", new object[] {
                    status}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndFirmwareStatusNotification(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void FirmwareStatusNotificationAsync(FirmwareStatus status) {
        this.FirmwareStatusNotificationAsync(status, null);
    }
    
    /// <remarks/>
    public void FirmwareStatusNotificationAsync(FirmwareStatus status, object userState) {
        if ((this.FirmwareStatusNotificationOperationCompleted == null)) {
            this.FirmwareStatusNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFirmwareStatusNotificationOperationCompleted);
        }
        this.InvokeAsync("FirmwareStatusNotification", new object[] {
                    status}, this.FirmwareStatusNotificationOperationCompleted, userState);
    }
    
    private void OnFirmwareStatusNotificationOperationCompleted(object arg) {
        if ((this.FirmwareStatusNotificationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FirmwareStatusNotificationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DiagnosticsStatusNotification", RequestElementName="diagnosticsStatusNotificationRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="diagnosticsStatusNotificationResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void DiagnosticsStatusNotification(DiagnosticsStatus status) {
        this.Invoke("DiagnosticsStatusNotification", new object[] {
                    status});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDiagnosticsStatusNotification(DiagnosticsStatus status, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DiagnosticsStatusNotification", new object[] {
                    status}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDiagnosticsStatusNotification(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void DiagnosticsStatusNotificationAsync(DiagnosticsStatus status) {
        this.DiagnosticsStatusNotificationAsync(status, null);
    }
    
    /// <remarks/>
    public void DiagnosticsStatusNotificationAsync(DiagnosticsStatus status, object userState) {
        if ((this.DiagnosticsStatusNotificationOperationCompleted == null)) {
            this.DiagnosticsStatusNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiagnosticsStatusNotificationOperationCompleted);
        }
        this.InvokeAsync("DiagnosticsStatusNotification", new object[] {
                    status}, this.DiagnosticsStatusNotificationOperationCompleted, userState);
    }
    
    private void OnDiagnosticsStatusNotificationOperationCompleted(object arg) {
        if ((this.DiagnosticsStatusNotificationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DiagnosticsStatusNotificationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DataTransfer", RequestElementName="dataTransferRequest", RequestNamespace="urn://Ocpp/Cs/2012/02/", ResponseElementName="dataTransferResponse", ResponseNamespace="urn://Ocpp/Cs/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public DataTransferStatus DataTransfer(string vendorId, string messageId, ref string data) {
        object[] results = this.Invoke("DataTransfer", new object[] {
                    vendorId,
                    messageId,
                    data});
        data = ((string)(results[1]));
        return ((DataTransferStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDataTransfer(string vendorId, string messageId, string data, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DataTransfer", new object[] {
                    vendorId,
                    messageId,
                    data}, callback, asyncState);
    }
    
    /// <remarks/>
    public DataTransferStatus EndDataTransfer(System.IAsyncResult asyncResult, out string data) {
        object[] results = this.EndInvoke(asyncResult);
        data = ((string)(results[1]));
        return ((DataTransferStatus)(results[0]));
    }
    
    /// <remarks/>
    public void DataTransferAsync(string vendorId, string messageId, string data) {
        this.DataTransferAsync(vendorId, messageId, data, null);
    }
    
    /// <remarks/>
    public void DataTransferAsync(string vendorId, string messageId, string data, object userState) {
        if ((this.DataTransferOperationCompleted == null)) {
            this.DataTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataTransferOperationCompleted);
        }
        this.InvokeAsync("DataTransfer", new object[] {
                    vendorId,
                    messageId,
                    data}, this.DataTransferOperationCompleted, userState);
    }
    
    private void OnDataTransferOperationCompleted(object arg) {
        if ((this.DataTransferCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DataTransferCompleted(this, new DataTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2001/XMLSchema")]
[System.Xml.Serialization.XmlRootAttribute("chargeBoxIdentity", Namespace="urn://Ocpp/Cs/2012/02/", IsNullable=false)]
public partial class @string : System.Web.Services.Protocols.SoapHeader {
    
    private string[] textField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string[] Text {
        get {
            return this.textField;
        }
        set {
            this.textField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public partial class IdTagInfo {
    
    private AuthorizationStatus statusField;
    
    private System.DateTime expiryDateField;
    
    private bool expiryDateFieldSpecified;
    
    private string parentIdTagField;
    
    /// <remarks/>
    public AuthorizationStatus status {
        get {
            return this.statusField;
        }
        set {
            this.statusField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime expiryDate {
        get {
            return this.expiryDateField;
        }
        set {
            this.expiryDateField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIgnoreAttribute()]
    public bool expiryDateSpecified {
        get {
            return this.expiryDateFieldSpecified;
        }
        set {
            this.expiryDateFieldSpecified = value;
        }
    }
    
    /// <remarks/>
    public string parentIdTag {
        get {
            return this.parentIdTagField;
        }
        set {
            this.parentIdTagField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum AuthorizationStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Blocked,
    
    /// <remarks/>
    Expired,
    
    /// <remarks/>
    Invalid,
    
    /// <remarks/>
    ConcurrentTx,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public partial class TransactionData {
    
    private MeterValue[] valuesField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("values")]
    public MeterValue[] values {
        get {
            return this.valuesField;
        }
        set {
            this.valuesField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public partial class MeterValue {
    
    private System.DateTime timestampField;
    
    private MeterValueValue[] valueField;
    
    /// <remarks/>
    public System.DateTime timestamp {
        get {
            return this.timestampField;
        }
        set {
            this.timestampField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute("value")]
    public MeterValueValue[] value {
        get {
            return this.valueField;
        }
        set {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn://Ocpp/Cs/2012/02/")]
public partial class MeterValueValue {
    
    private ReadingContext contextField;
    
    private ValueFormat formatField;
    
    private Measurand measurandField;
    
    private Location locationField;
    
    private UnitOfMeasure unitField;
    
    private string valueField;
    
    public MeterValueValue() {
        this.contextField = ReadingContext.SamplePeriodic;
        this.formatField = ValueFormat.Raw;
        this.measurandField = Measurand.EnergyActiveImportRegister;
        this.locationField = Location.Outlet;
        this.unitField = UnitOfMeasure.Wh;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(ReadingContext.SamplePeriodic)]
    public ReadingContext context {
        get {
            return this.contextField;
        }
        set {
            this.contextField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(ValueFormat.Raw)]
    public ValueFormat format {
        get {
            return this.formatField;
        }
        set {
            this.formatField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(Measurand.EnergyActiveImportRegister)]
    public Measurand measurand {
        get {
            return this.measurandField;
        }
        set {
            this.measurandField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(Location.Outlet)]
    public Location location {
        get {
            return this.locationField;
        }
        set {
            this.locationField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlAttributeAttribute()]
    [System.ComponentModel.DefaultValueAttribute(UnitOfMeasure.Wh)]
    public UnitOfMeasure unit {
        get {
            return this.unitField;
        }
        set {
            this.unitField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string Value {
        get {
            return this.valueField;
        }
        set {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum ReadingContext {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Interruption.Begin")]
    InterruptionBegin,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Interruption.End")]
    InterruptionEnd,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Sample.Clock")]
    SampleClock,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Sample.Periodic")]
    SamplePeriodic,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Transaction.Begin")]
    TransactionBegin,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Transaction.End")]
    TransactionEnd,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum ValueFormat {
    
    /// <remarks/>
    Raw,
    
    /// <remarks/>
    SignedData,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum Measurand {
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Energy.Active.Export.Register")]
    EnergyActiveExportRegister,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Energy.Active.Import.Register")]
    EnergyActiveImportRegister,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Energy.Reactive.Export.Register")]
    EnergyReactiveExportRegister,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Energy.Reactive.Import.Register")]
    EnergyReactiveImportRegister,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Energy.Active.Export.Interval")]
    EnergyActiveExportInterval,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Energy.Active.Import.Interval")]
    EnergyActiveImportInterval,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Energy.Reactive.Export.Interval")]
    EnergyReactiveExportInterval,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Energy.Reactive.Import.Interval")]
    EnergyReactiveImportInterval,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Power.Active.Export")]
    PowerActiveExport,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Power.Active.Import")]
    PowerActiveImport,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Power.Reactive.Export")]
    PowerReactiveExport,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Power.Reactive.Import")]
    PowerReactiveImport,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Current.Export")]
    CurrentExport,
    
    /// <remarks/>
    [System.Xml.Serialization.XmlEnumAttribute("Current.Import")]
    CurrentImport,
    
    /// <remarks/>
    Voltage,
    
    /// <remarks/>
    Temperature,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum Location {
    
    /// <remarks/>
    Inlet,
    
    /// <remarks/>
    Outlet,
    
    /// <remarks/>
    Body,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum UnitOfMeasure {
    
    /// <remarks/>
    Wh,
    
    /// <remarks/>
    kWh,
    
    /// <remarks/>
    varh,
    
    /// <remarks/>
    kvarh,
    
    /// <remarks/>
    W,
    
    /// <remarks/>
    kW,
    
    /// <remarks/>
    var,
    
    /// <remarks/>
    kvar,
    
    /// <remarks/>
    Amp,
    
    /// <remarks/>
    Volt,
    
    /// <remarks/>
    Celsius,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum RegistrationStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum ChargePointStatus {
    
    /// <remarks/>
    Available,
    
    /// <remarks/>
    Occupied,
    
    /// <remarks/>
    Faulted,
    
    /// <remarks/>
    Unavailable,
    
    /// <remarks/>
    Reserved,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum ChargePointErrorCode {
    
    /// <remarks/>
    ConnectorLockFailure,
    
    /// <remarks/>
    HighTemperature,
    
    /// <remarks/>
    Mode3Error,
    
    /// <remarks/>
    NoError,
    
    /// <remarks/>
    PowerMeterFailure,
    
    /// <remarks/>
    PowerSwitchFailure,
    
    /// <remarks/>
    ReaderFailure,
    
    /// <remarks/>
    ResetFailure,
    
    /// <remarks/>
    GroundFailure,
    
    /// <remarks/>
    OverCurrentFailure,
    
    /// <remarks/>
    UnderVoltage,
    
    /// <remarks/>
    WeakSignal,
    
    /// <remarks/>
    OtherError,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum FirmwareStatus {
    
    /// <remarks/>
    Downloaded,
    
    /// <remarks/>
    DownloadFailed,
    
    /// <remarks/>
    InstallationFailed,
    
    /// <remarks/>
    Installed,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum DiagnosticsStatus {
    
    /// <remarks/>
    Uploaded,
    
    /// <remarks/>
    UploadFailed,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cs/2012/02/")]
public enum DataTransferStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
    
    /// <remarks/>
    UnknownMessageId,
    
    /// <remarks/>
    UnknownVendorId,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void AuthorizeCompletedEventHandler(object sender, AuthorizeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public IdTagInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((IdTagInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void StartTransactionCompletedEventHandler(object sender, StartTransactionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class StartTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal StartTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public IdTagInfo idTagInfo {
        get {
            this.RaiseExceptionIfNecessary();
            return ((IdTagInfo)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void StopTransactionCompletedEventHandler(object sender, StopTransactionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class StopTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal StopTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public IdTagInfo Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((IdTagInfo)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void HeartbeatCompletedEventHandler(object sender, HeartbeatCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class HeartbeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal HeartbeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.DateTime Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.DateTime)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void MeterValuesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void BootNotificationCompletedEventHandler(object sender, BootNotificationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BootNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal BootNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public RegistrationStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((RegistrationStatus)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public System.DateTime currentTime {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.DateTime)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int heartbeatInterval {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void StatusNotificationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void FirmwareStatusNotificationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void DiagnosticsStatusNotificationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void DataTransferCompletedEventHandler(object sender, DataTransferCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DataTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DataTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DataTransferStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DataTransferStatus)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string data {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}
