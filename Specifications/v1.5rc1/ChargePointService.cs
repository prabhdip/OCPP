//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 


/// <remarks/>
// CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ChargePointServiceSoap", Namespace="urn://Ocpp/Cp/2012/02/")]
public partial class ChargePointService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private @string chargeBoxIdentityField;
    
    private System.Threading.SendOrPostCallback UnlockConnectorOperationCompleted;
    
    private System.Threading.SendOrPostCallback ResetOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangeAvailabilityOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDiagnosticsOperationCompleted;
    
    private System.Threading.SendOrPostCallback ClearCacheOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateFirmwareOperationCompleted;
    
    private System.Threading.SendOrPostCallback ChangeConfigurationOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoteStartTransactionOperationCompleted;
    
    private System.Threading.SendOrPostCallback RemoteStopTransactionOperationCompleted;
    
    private System.Threading.SendOrPostCallback CancelReservationOperationCompleted;
    
    private System.Threading.SendOrPostCallback DataTransferOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetConfigurationOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLocalListVersionOperationCompleted;
    
    private System.Threading.SendOrPostCallback ReserveNowOperationCompleted;
    
    private System.Threading.SendOrPostCallback SendLocalListOperationCompleted;
    
    /// <remarks/>
    public ChargePointService() {
        this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
        this.Url = "http://localhost/Ocpp/ChargePointService/";
    }
    
    public @string chargeBoxIdentity {
        get {
            return this.chargeBoxIdentityField;
        }
        set {
            this.chargeBoxIdentityField = value;
        }
    }
    
    /// <remarks/>
    public event UnlockConnectorCompletedEventHandler UnlockConnectorCompleted;
    
    /// <remarks/>
    public event ResetCompletedEventHandler ResetCompleted;
    
    /// <remarks/>
    public event ChangeAvailabilityCompletedEventHandler ChangeAvailabilityCompleted;
    
    /// <remarks/>
    public event GetDiagnosticsCompletedEventHandler GetDiagnosticsCompleted;
    
    /// <remarks/>
    public event ClearCacheCompletedEventHandler ClearCacheCompleted;
    
    /// <remarks/>
    public event UpdateFirmwareCompletedEventHandler UpdateFirmwareCompleted;
    
    /// <remarks/>
    public event ChangeConfigurationCompletedEventHandler ChangeConfigurationCompleted;
    
    /// <remarks/>
    public event RemoteStartTransactionCompletedEventHandler RemoteStartTransactionCompleted;
    
    /// <remarks/>
    public event RemoteStopTransactionCompletedEventHandler RemoteStopTransactionCompleted;
    
    /// <remarks/>
    public event CancelReservationCompletedEventHandler CancelReservationCompleted;
    
    /// <remarks/>
    public event DataTransferCompletedEventHandler DataTransferCompleted;
    
    /// <remarks/>
    public event GetConfigurationCompletedEventHandler GetConfigurationCompleted;
    
    /// <remarks/>
    public event GetLocalListVersionCompletedEventHandler GetLocalListVersionCompleted;
    
    /// <remarks/>
    public event ReserveNowCompletedEventHandler ReserveNowCompleted;
    
    /// <remarks/>
    public event SendLocalListCompletedEventHandler SendLocalListCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/UnlockConnector", RequestElementName="unlockConnectorRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="unlockConnectorResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public UnlockStatus UnlockConnector(int connectorId) {
        object[] results = this.Invoke("UnlockConnector", new object[] {
                    connectorId});
        return ((UnlockStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnlockConnector(int connectorId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnlockConnector", new object[] {
                    connectorId}, callback, asyncState);
    }
    
    /// <remarks/>
    public UnlockStatus EndUnlockConnector(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((UnlockStatus)(results[0]));
    }
    
    /// <remarks/>
    public void UnlockConnectorAsync(int connectorId) {
        this.UnlockConnectorAsync(connectorId, null);
    }
    
    /// <remarks/>
    public void UnlockConnectorAsync(int connectorId, object userState) {
        if ((this.UnlockConnectorOperationCompleted == null)) {
            this.UnlockConnectorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockConnectorOperationCompleted);
        }
        this.InvokeAsync("UnlockConnector", new object[] {
                    connectorId}, this.UnlockConnectorOperationCompleted, userState);
    }
    
    private void OnUnlockConnectorOperationCompleted(object arg) {
        if ((this.UnlockConnectorCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UnlockConnectorCompleted(this, new UnlockConnectorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/Reset", RequestElementName="resetRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="resetResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public ResetStatus Reset(ResetType type) {
        object[] results = this.Invoke("Reset", new object[] {
                    type});
        return ((ResetStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReset(ResetType type, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Reset", new object[] {
                    type}, callback, asyncState);
    }
    
    /// <remarks/>
    public ResetStatus EndReset(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ResetStatus)(results[0]));
    }
    
    /// <remarks/>
    public void ResetAsync(ResetType type) {
        this.ResetAsync(type, null);
    }
    
    /// <remarks/>
    public void ResetAsync(ResetType type, object userState) {
        if ((this.ResetOperationCompleted == null)) {
            this.ResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetOperationCompleted);
        }
        this.InvokeAsync("Reset", new object[] {
                    type}, this.ResetOperationCompleted, userState);
    }
    
    private void OnResetOperationCompleted(object arg) {
        if ((this.ResetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ResetCompleted(this, new ResetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/ChangeAvailability", RequestElementName="changeAvailabilityRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="changeAvailabilityResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public AvailabilityStatus ChangeAvailability(int connectorId, AvailabilityType type) {
        object[] results = this.Invoke("ChangeAvailability", new object[] {
                    connectorId,
                    type});
        return ((AvailabilityStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangeAvailability(int connectorId, AvailabilityType type, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeAvailability", new object[] {
                    connectorId,
                    type}, callback, asyncState);
    }
    
    /// <remarks/>
    public AvailabilityStatus EndChangeAvailability(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((AvailabilityStatus)(results[0]));
    }
    
    /// <remarks/>
    public void ChangeAvailabilityAsync(int connectorId, AvailabilityType type) {
        this.ChangeAvailabilityAsync(connectorId, type, null);
    }
    
    /// <remarks/>
    public void ChangeAvailabilityAsync(int connectorId, AvailabilityType type, object userState) {
        if ((this.ChangeAvailabilityOperationCompleted == null)) {
            this.ChangeAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeAvailabilityOperationCompleted);
        }
        this.InvokeAsync("ChangeAvailability", new object[] {
                    connectorId,
                    type}, this.ChangeAvailabilityOperationCompleted, userState);
    }
    
    private void OnChangeAvailabilityOperationCompleted(object arg) {
        if ((this.ChangeAvailabilityCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangeAvailabilityCompleted(this, new ChangeAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetDiagnostics", RequestElementName="getDiagnosticsRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="getDiagnosticsResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("fileName")]
    public string GetDiagnostics([System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")] string location, System.DateTime startTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool startTimeSpecified, System.DateTime stopTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool stopTimeSpecified, int retries, [System.Xml.Serialization.XmlIgnoreAttribute()] bool retriesSpecified, int retryInterval, [System.Xml.Serialization.XmlIgnoreAttribute()] bool retryIntervalSpecified) {
        object[] results = this.Invoke("GetDiagnostics", new object[] {
                    location,
                    startTime,
                    startTimeSpecified,
                    stopTime,
                    stopTimeSpecified,
                    retries,
                    retriesSpecified,
                    retryInterval,
                    retryIntervalSpecified});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetDiagnostics(string location, System.DateTime startTime, bool startTimeSpecified, System.DateTime stopTime, bool stopTimeSpecified, int retries, bool retriesSpecified, int retryInterval, bool retryIntervalSpecified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetDiagnostics", new object[] {
                    location,
                    startTime,
                    startTimeSpecified,
                    stopTime,
                    stopTimeSpecified,
                    retries,
                    retriesSpecified,
                    retryInterval,
                    retryIntervalSpecified}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetDiagnostics(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetDiagnosticsAsync(string location, System.DateTime startTime, bool startTimeSpecified, System.DateTime stopTime, bool stopTimeSpecified, int retries, bool retriesSpecified, int retryInterval, bool retryIntervalSpecified) {
        this.GetDiagnosticsAsync(location, startTime, startTimeSpecified, stopTime, stopTimeSpecified, retries, retriesSpecified, retryInterval, retryIntervalSpecified, null);
    }
    
    /// <remarks/>
    public void GetDiagnosticsAsync(string location, System.DateTime startTime, bool startTimeSpecified, System.DateTime stopTime, bool stopTimeSpecified, int retries, bool retriesSpecified, int retryInterval, bool retryIntervalSpecified, object userState) {
        if ((this.GetDiagnosticsOperationCompleted == null)) {
            this.GetDiagnosticsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiagnosticsOperationCompleted);
        }
        this.InvokeAsync("GetDiagnostics", new object[] {
                    location,
                    startTime,
                    startTimeSpecified,
                    stopTime,
                    stopTimeSpecified,
                    retries,
                    retriesSpecified,
                    retryInterval,
                    retryIntervalSpecified}, this.GetDiagnosticsOperationCompleted, userState);
    }
    
    private void OnGetDiagnosticsOperationCompleted(object arg) {
        if ((this.GetDiagnosticsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDiagnosticsCompleted(this, new GetDiagnosticsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/ClearCache", RequestElementName="clearCacheRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="clearCacheResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public ClearCacheStatus ClearCache() {
        object[] results = this.Invoke("ClearCache", new object[0]);
        return ((ClearCacheStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginClearCache(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ClearCache", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public ClearCacheStatus EndClearCache(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ClearCacheStatus)(results[0]));
    }
    
    /// <remarks/>
    public void ClearCacheAsync() {
        this.ClearCacheAsync(null);
    }
    
    /// <remarks/>
    public void ClearCacheAsync(object userState) {
        if ((this.ClearCacheOperationCompleted == null)) {
            this.ClearCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearCacheOperationCompleted);
        }
        this.InvokeAsync("ClearCache", new object[0], this.ClearCacheOperationCompleted, userState);
    }
    
    private void OnClearCacheOperationCompleted(object arg) {
        if ((this.ClearCacheCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ClearCacheCompleted(this, new ClearCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/UpdateFirmware", RequestElementName="updateFirmwareRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="updateFirmwareResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void UpdateFirmware(System.DateTime retrieveDate, [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")] string location, int retries, [System.Xml.Serialization.XmlIgnoreAttribute()] bool retriesSpecified, int retryInterval, [System.Xml.Serialization.XmlIgnoreAttribute()] bool retryIntervalSpecified) {
        this.Invoke("UpdateFirmware", new object[] {
                    retrieveDate,
                    location,
                    retries,
                    retriesSpecified,
                    retryInterval,
                    retryIntervalSpecified});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateFirmware(System.DateTime retrieveDate, string location, int retries, bool retriesSpecified, int retryInterval, bool retryIntervalSpecified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateFirmware", new object[] {
                    retrieveDate,
                    location,
                    retries,
                    retriesSpecified,
                    retryInterval,
                    retryIntervalSpecified}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateFirmware(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    public void UpdateFirmwareAsync(System.DateTime retrieveDate, string location, int retries, bool retriesSpecified, int retryInterval, bool retryIntervalSpecified) {
        this.UpdateFirmwareAsync(retrieveDate, location, retries, retriesSpecified, retryInterval, retryIntervalSpecified, null);
    }
    
    /// <remarks/>
    public void UpdateFirmwareAsync(System.DateTime retrieveDate, string location, int retries, bool retriesSpecified, int retryInterval, bool retryIntervalSpecified, object userState) {
        if ((this.UpdateFirmwareOperationCompleted == null)) {
            this.UpdateFirmwareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFirmwareOperationCompleted);
        }
        this.InvokeAsync("UpdateFirmware", new object[] {
                    retrieveDate,
                    location,
                    retries,
                    retriesSpecified,
                    retryInterval,
                    retryIntervalSpecified}, this.UpdateFirmwareOperationCompleted, userState);
    }
    
    private void OnUpdateFirmwareOperationCompleted(object arg) {
        if ((this.UpdateFirmwareCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateFirmwareCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/ChangeConfiguration", RequestElementName="changeConfigurationRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="changeConfigurationResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public ConfigurationStatus ChangeConfiguration(string key, string value) {
        object[] results = this.Invoke("ChangeConfiguration", new object[] {
                    key,
                    value});
        return ((ConfigurationStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginChangeConfiguration(string key, string value, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ChangeConfiguration", new object[] {
                    key,
                    value}, callback, asyncState);
    }
    
    /// <remarks/>
    public ConfigurationStatus EndChangeConfiguration(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ConfigurationStatus)(results[0]));
    }
    
    /// <remarks/>
    public void ChangeConfigurationAsync(string key, string value) {
        this.ChangeConfigurationAsync(key, value, null);
    }
    
    /// <remarks/>
    public void ChangeConfigurationAsync(string key, string value, object userState) {
        if ((this.ChangeConfigurationOperationCompleted == null)) {
            this.ChangeConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeConfigurationOperationCompleted);
        }
        this.InvokeAsync("ChangeConfiguration", new object[] {
                    key,
                    value}, this.ChangeConfigurationOperationCompleted, userState);
    }
    
    private void OnChangeConfigurationOperationCompleted(object arg) {
        if ((this.ChangeConfigurationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ChangeConfigurationCompleted(this, new ChangeConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/RemoteStartTransaction", RequestElementName="remoteStartTransactionRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="remoteStartTransactionResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public RemoteStartStopStatus RemoteStartTransaction(string idTag, int connectorId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool connectorIdSpecified) {
        object[] results = this.Invoke("RemoteStartTransaction", new object[] {
                    idTag,
                    connectorId,
                    connectorIdSpecified});
        return ((RemoteStartStopStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoteStartTransaction(string idTag, int connectorId, bool connectorIdSpecified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoteStartTransaction", new object[] {
                    idTag,
                    connectorId,
                    connectorIdSpecified}, callback, asyncState);
    }
    
    /// <remarks/>
    public RemoteStartStopStatus EndRemoteStartTransaction(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((RemoteStartStopStatus)(results[0]));
    }
    
    /// <remarks/>
    public void RemoteStartTransactionAsync(string idTag, int connectorId, bool connectorIdSpecified) {
        this.RemoteStartTransactionAsync(idTag, connectorId, connectorIdSpecified, null);
    }
    
    /// <remarks/>
    public void RemoteStartTransactionAsync(string idTag, int connectorId, bool connectorIdSpecified, object userState) {
        if ((this.RemoteStartTransactionOperationCompleted == null)) {
            this.RemoteStartTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteStartTransactionOperationCompleted);
        }
        this.InvokeAsync("RemoteStartTransaction", new object[] {
                    idTag,
                    connectorId,
                    connectorIdSpecified}, this.RemoteStartTransactionOperationCompleted, userState);
    }
    
    private void OnRemoteStartTransactionOperationCompleted(object arg) {
        if ((this.RemoteStartTransactionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoteStartTransactionCompleted(this, new RemoteStartTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/RemoteStopTransaction", RequestElementName="remoteStopTransactionRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="remoteStopTransactionResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public RemoteStartStopStatus RemoteStopTransaction(int transactionId) {
        object[] results = this.Invoke("RemoteStopTransaction", new object[] {
                    transactionId});
        return ((RemoteStartStopStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoteStopTransaction(int transactionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoteStopTransaction", new object[] {
                    transactionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public RemoteStartStopStatus EndRemoteStopTransaction(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((RemoteStartStopStatus)(results[0]));
    }
    
    /// <remarks/>
    public void RemoteStopTransactionAsync(int transactionId) {
        this.RemoteStopTransactionAsync(transactionId, null);
    }
    
    /// <remarks/>
    public void RemoteStopTransactionAsync(int transactionId, object userState) {
        if ((this.RemoteStopTransactionOperationCompleted == null)) {
            this.RemoteStopTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoteStopTransactionOperationCompleted);
        }
        this.InvokeAsync("RemoteStopTransaction", new object[] {
                    transactionId}, this.RemoteStopTransactionOperationCompleted, userState);
    }
    
    private void OnRemoteStopTransactionOperationCompleted(object arg) {
        if ((this.RemoteStopTransactionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.RemoteStopTransactionCompleted(this, new RemoteStopTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/CancelReservation", RequestElementName="cancelReservationRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="cancelReservationResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public CancelReservationStatus CancelReservation(int reservationId) {
        object[] results = this.Invoke("CancelReservation", new object[] {
                    reservationId});
        return ((CancelReservationStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelReservation(int reservationId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelReservation", new object[] {
                    reservationId}, callback, asyncState);
    }
    
    /// <remarks/>
    public CancelReservationStatus EndCancelReservation(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((CancelReservationStatus)(results[0]));
    }
    
    /// <remarks/>
    public void CancelReservationAsync(int reservationId) {
        this.CancelReservationAsync(reservationId, null);
    }
    
    /// <remarks/>
    public void CancelReservationAsync(int reservationId, object userState) {
        if ((this.CancelReservationOperationCompleted == null)) {
            this.CancelReservationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelReservationOperationCompleted);
        }
        this.InvokeAsync("CancelReservation", new object[] {
                    reservationId}, this.CancelReservationOperationCompleted, userState);
    }
    
    private void OnCancelReservationOperationCompleted(object arg) {
        if ((this.CancelReservationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CancelReservationCompleted(this, new CancelReservationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/DataTransfer", RequestElementName="dataTransferRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="dataTransferResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public DataTransferStatus DataTransfer(string vendorId, string messageId, ref string data) {
        object[] results = this.Invoke("DataTransfer", new object[] {
                    vendorId,
                    messageId,
                    data});
        data = ((string)(results[1]));
        return ((DataTransferStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDataTransfer(string vendorId, string messageId, string data, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DataTransfer", new object[] {
                    vendorId,
                    messageId,
                    data}, callback, asyncState);
    }
    
    /// <remarks/>
    public DataTransferStatus EndDataTransfer(System.IAsyncResult asyncResult, out string data) {
        object[] results = this.EndInvoke(asyncResult);
        data = ((string)(results[1]));
        return ((DataTransferStatus)(results[0]));
    }
    
    /// <remarks/>
    public void DataTransferAsync(string vendorId, string messageId, string data) {
        this.DataTransferAsync(vendorId, messageId, data, null);
    }
    
    /// <remarks/>
    public void DataTransferAsync(string vendorId, string messageId, string data, object userState) {
        if ((this.DataTransferOperationCompleted == null)) {
            this.DataTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDataTransferOperationCompleted);
        }
        this.InvokeAsync("DataTransfer", new object[] {
                    vendorId,
                    messageId,
                    data}, this.DataTransferOperationCompleted, userState);
    }
    
    private void OnDataTransferOperationCompleted(object arg) {
        if ((this.DataTransferCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DataTransferCompleted(this, new DataTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetConfiguration", RequestElementName="getConfigurationRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="getConfigurationResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("configurationKeys")]
    public KeyValue[] GetConfiguration([System.Xml.Serialization.XmlElementAttribute("keys")] string[] keys, [System.Xml.Serialization.XmlElementAttribute("unknownKeys")] out string[] unknownKeys) {
        object[] results = this.Invoke("GetConfiguration", new object[] {
                    keys});
        unknownKeys = ((string[])(results[1]));
        return ((KeyValue[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetConfiguration(string[] keys, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetConfiguration", new object[] {
                    keys}, callback, asyncState);
    }
    
    /// <remarks/>
    public KeyValue[] EndGetConfiguration(System.IAsyncResult asyncResult, out string[] unknownKeys) {
        object[] results = this.EndInvoke(asyncResult);
        unknownKeys = ((string[])(results[1]));
        return ((KeyValue[])(results[0]));
    }
    
    /// <remarks/>
    public void GetConfigurationAsync(string[] keys) {
        this.GetConfigurationAsync(keys, null);
    }
    
    /// <remarks/>
    public void GetConfigurationAsync(string[] keys, object userState) {
        if ((this.GetConfigurationOperationCompleted == null)) {
            this.GetConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationOperationCompleted);
        }
        this.InvokeAsync("GetConfiguration", new object[] {
                    keys}, this.GetConfigurationOperationCompleted, userState);
    }
    
    private void OnGetConfigurationOperationCompleted(object arg) {
        if ((this.GetConfigurationCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetConfigurationCompleted(this, new GetConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetLocalListVersion", RequestElementName="getLocalListVersionRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="getLocalListVersionResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("listVersion")]
    public int GetLocalListVersion() {
        object[] results = this.Invoke("GetLocalListVersion", new object[0]);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLocalListVersion(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLocalListVersion", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public int EndGetLocalListVersion(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void GetLocalListVersionAsync() {
        this.GetLocalListVersionAsync(null);
    }
    
    /// <remarks/>
    public void GetLocalListVersionAsync(object userState) {
        if ((this.GetLocalListVersionOperationCompleted == null)) {
            this.GetLocalListVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLocalListVersionOperationCompleted);
        }
        this.InvokeAsync("GetLocalListVersion", new object[0], this.GetLocalListVersionOperationCompleted, userState);
    }
    
    private void OnGetLocalListVersionOperationCompleted(object arg) {
        if ((this.GetLocalListVersionCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLocalListVersionCompleted(this, new GetLocalListVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/ReserveNow", RequestElementName="reserveNowRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="reserveNowResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public ReservationStatus ReserveNow(int connectorId, System.DateTime expiryDate, string idTag, int parentIdTag, [System.Xml.Serialization.XmlIgnoreAttribute()] bool parentIdTagSpecified, int reservationId) {
        object[] results = this.Invoke("ReserveNow", new object[] {
                    connectorId,
                    expiryDate,
                    idTag,
                    parentIdTag,
                    parentIdTagSpecified,
                    reservationId});
        return ((ReservationStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReserveNow(int connectorId, System.DateTime expiryDate, string idTag, int parentIdTag, bool parentIdTagSpecified, int reservationId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReserveNow", new object[] {
                    connectorId,
                    expiryDate,
                    idTag,
                    parentIdTag,
                    parentIdTagSpecified,
                    reservationId}, callback, asyncState);
    }
    
    /// <remarks/>
    public ReservationStatus EndReserveNow(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((ReservationStatus)(results[0]));
    }
    
    /// <remarks/>
    public void ReserveNowAsync(int connectorId, System.DateTime expiryDate, string idTag, int parentIdTag, bool parentIdTagSpecified, int reservationId) {
        this.ReserveNowAsync(connectorId, expiryDate, idTag, parentIdTag, parentIdTagSpecified, reservationId, null);
    }
    
    /// <remarks/>
    public void ReserveNowAsync(int connectorId, System.DateTime expiryDate, string idTag, int parentIdTag, bool parentIdTagSpecified, int reservationId, object userState) {
        if ((this.ReserveNowOperationCompleted == null)) {
            this.ReserveNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReserveNowOperationCompleted);
        }
        this.InvokeAsync("ReserveNow", new object[] {
                    connectorId,
                    expiryDate,
                    idTag,
                    parentIdTag,
                    parentIdTagSpecified,
                    reservationId}, this.ReserveNowOperationCompleted, userState);
    }
    
    private void OnReserveNowOperationCompleted(object arg) {
        if ((this.ReserveNowCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ReserveNowCompleted(this, new ReserveNowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapHeaderAttribute("chargeBoxIdentity")]
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/SendLocalList", RequestElementName="sendLocalListRequest", RequestNamespace="urn://Ocpp/Cp/2012/02/", ResponseElementName="sendLocalListResponse", ResponseNamespace="urn://Ocpp/Cp/2012/02/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("status")]
    public UpdateStatus SendLocalList(UpdateType updateType, int listVersion, [System.Xml.Serialization.XmlElementAttribute("localAuthorisationList")] AuthorisationData[] localAuthorisationList, ref int hash, [System.Xml.Serialization.XmlIgnoreAttribute()] ref bool hashSpecified) {
        object[] results = this.Invoke("SendLocalList", new object[] {
                    updateType,
                    listVersion,
                    localAuthorisationList,
                    hash,
                    hashSpecified});
        hash = ((int)(results[1]));
        hashSpecified = ((bool)(results[2]));
        return ((UpdateStatus)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSendLocalList(UpdateType updateType, int listVersion, AuthorisationData[] localAuthorisationList, int hash, bool hashSpecified, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SendLocalList", new object[] {
                    updateType,
                    listVersion,
                    localAuthorisationList,
                    hash,
                    hashSpecified}, callback, asyncState);
    }
    
    /// <remarks/>
    public UpdateStatus EndSendLocalList(System.IAsyncResult asyncResult, out int hash, out bool hashSpecified) {
        object[] results = this.EndInvoke(asyncResult);
        hash = ((int)(results[1]));
        hashSpecified = ((bool)(results[2]));
        return ((UpdateStatus)(results[0]));
    }
    
    /// <remarks/>
    public void SendLocalListAsync(UpdateType updateType, int listVersion, AuthorisationData[] localAuthorisationList, int hash, bool hashSpecified) {
        this.SendLocalListAsync(updateType, listVersion, localAuthorisationList, hash, hashSpecified, null);
    }
    
    /// <remarks/>
    public void SendLocalListAsync(UpdateType updateType, int listVersion, AuthorisationData[] localAuthorisationList, int hash, bool hashSpecified, object userState) {
        if ((this.SendLocalListOperationCompleted == null)) {
            this.SendLocalListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendLocalListOperationCompleted);
        }
        this.InvokeAsync("SendLocalList", new object[] {
                    updateType,
                    listVersion,
                    localAuthorisationList,
                    hash,
                    hashSpecified}, this.SendLocalListOperationCompleted, userState);
    }
    
    private void OnSendLocalListOperationCompleted(object arg) {
        if ((this.SendLocalListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SendLocalListCompleted(this, new SendLocalListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.w3.org/2001/XMLSchema")]
[System.Xml.Serialization.XmlRootAttribute("chargeBoxIdentity", Namespace="urn://Ocpp/Cp/2012/02/", IsNullable=false)]
public partial class @string : System.Web.Services.Protocols.SoapHeader {
    
    private string[] textField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTextAttribute()]
    public string[] Text {
        get {
            return this.textField;
        }
        set {
            this.textField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum UnlockStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum ResetType {
    
    /// <remarks/>
    Hard,
    
    /// <remarks/>
    Soft,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum ResetStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum AvailabilityType {
    
    /// <remarks/>
    Inoperative,
    
    /// <remarks/>
    Operative,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum AvailabilityStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
    
    /// <remarks/>
    Scheduled,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum ClearCacheStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum ConfigurationStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
    
    /// <remarks/>
    NotSupported,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum RemoteStartStopStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum CancelReservationStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum DataTransferStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Rejected,
    
    /// <remarks/>
    UnknownMessageId,
    
    /// <remarks/>
    UnknownVendorId,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public partial class KeyValue {
    
    private string keyField;
    
    private bool readonlyField;
    
    private string valueField;
    
    /// <remarks/>
    public string key {
        get {
            return this.keyField;
        }
        set {
            this.keyField = value;
        }
    }
    
    /// <remarks/>
    public bool @readonly {
        get {
            return this.readonlyField;
        }
        set {
            this.readonlyField = value;
        }
    }
    
    /// <remarks/>
    public string value {
        get {
            return this.valueField;
        }
        set {
            this.valueField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public partial class AuthorisationData {
    
    private string idTagField;
    
    private string idTagInfoField;
    
    /// <remarks/>
    public string idTag {
        get {
            return this.idTagField;
        }
        set {
            this.idTagField = value;
        }
    }
    
    /// <remarks/>
    public string idTagInfo {
        get {
            return this.idTagInfoField;
        }
        set {
            this.idTagInfoField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum ReservationStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Faulted,
    
    /// <remarks/>
    Occupied,
    
    /// <remarks/>
    Rejected,
    
    /// <remarks/>
    Unavailable,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum UpdateType {
    
    /// <remarks/>
    Differential,
    
    /// <remarks/>
    Full,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="urn://Ocpp/Cp/2012/02/")]
public enum UpdateStatus {
    
    /// <remarks/>
    Accepted,
    
    /// <remarks/>
    Failed,
    
    /// <remarks/>
    HashError,
    
    /// <remarks/>
    NotSupported,
    
    /// <remarks/>
    VersionMismatch,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void UnlockConnectorCompletedEventHandler(object sender, UnlockConnectorCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UnlockConnectorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UnlockConnectorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public UnlockStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((UnlockStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void ResetCompletedEventHandler(object sender, ResetCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ResetStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ResetStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void ChangeAvailabilityCompletedEventHandler(object sender, ChangeAvailabilityCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangeAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangeAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public AvailabilityStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((AvailabilityStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetDiagnosticsCompletedEventHandler(object sender, GetDiagnosticsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetDiagnosticsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDiagnosticsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void ClearCacheCompletedEventHandler(object sender, ClearCacheCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ClearCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ClearCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ClearCacheStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ClearCacheStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void UpdateFirmwareCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void ChangeConfigurationCompletedEventHandler(object sender, ChangeConfigurationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ChangeConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ChangeConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ConfigurationStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ConfigurationStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void RemoteStartTransactionCompletedEventHandler(object sender, RemoteStartTransactionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RemoteStartTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RemoteStartTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public RemoteStartStopStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((RemoteStartStopStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void RemoteStopTransactionCompletedEventHandler(object sender, RemoteStopTransactionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class RemoteStopTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal RemoteStopTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public RemoteStartStopStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((RemoteStartStopStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void CancelReservationCompletedEventHandler(object sender, CancelReservationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CancelReservationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CancelReservationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public CancelReservationStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((CancelReservationStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void DataTransferCompletedEventHandler(object sender, DataTransferCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DataTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DataTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public DataTransferStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((DataTransferStatus)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string data {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetConfigurationCompletedEventHandler(object sender, GetConfigurationCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public KeyValue[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((KeyValue[])(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string[] unknownKeys {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void GetLocalListVersionCompletedEventHandler(object sender, GetLocalListVersionCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetLocalListVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLocalListVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void ReserveNowCompletedEventHandler(object sender, ReserveNowCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ReserveNowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ReserveNowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public ReservationStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((ReservationStatus)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void SendLocalListCompletedEventHandler(object sender, SendLocalListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SendLocalListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SendLocalListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public UpdateStatus Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((UpdateStatus)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public int hash {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public bool hashSpecified {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[2]));
        }
    }
}
